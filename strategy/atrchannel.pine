//@version=2

//----------------------------FUNCTIONS----------------------------//

IsLong() =>
    strategy.position_size > 0

IsShort() =>
    strategy.position_size < 0

//-----------------------------------------------------------------//

// 1. Define strategy settings

strategy(title="DEFAULT", overlay=true, pyramiding=1, 
		 initial_capital=1000000,
		 commission_type=strategy.commission.cash_per_order,
		 commission_value=4, slippage=2)

smaLength	=	input(title="SMA Length", type=integer, defval=350)
atrLength	=	input(title="ATR Length", type=integer, defval=20)

ubOffset	=	input(title="Upperband Offset", type=float, defval=7, step=0.50)
lbOffset	=	input(title="Lowerband Offset", type=float, defval=3, step=0.50)

usePosSize	=	input(title="Use Position Sizing?", type=bool, defval=true)
riskPerc	=	input(title="Risk %", type=float, defval=0.5, step=0.25)

entrylowestLow   =   lowest(low, 14)[1]
entryhighestHigh =   highest(high, 14)[1]

exitlowestLow   =   lowest(low, 8)[1]
exithighestHigh =   highest(high, 8)[1]

// 2. Calculate strategy values

smaValue	=	sma(close, smaLength)
atrValue	=	atr(atrLength)

upperBand	=	smaValue + (ubOffset * atrValue)
lowerBand	=	smaValue - (lbOffset * atrValue)

riskEquity	=	(riskPerc / 100) * strategy.equity
atrCurrency =	(atrValue * syminfo.pointvalue)
posSize     =	usePosSize ? floor(riskEquity / atrCurrency) : 1

// 3. Output strategy data

plot(exithighestHigh, color=blue)
plot(exitlowestLow, color=red)

// 4. Determine long trading conditions

// enterLong = crossover(close, lowerBand)

// 5. Determine short trading conditions

// enterShort = crossunder(close, upperBand)

// 6. Submit entry orders

if (close > entryhighestHigh)
	strategy.entry(id="EntryLong", long=true, qty=posSize)

if (close < entrylowestLow)
	strategy.entry(id="EntryShort", long=false, qty=posSize)

// 7. Submit exit orders

if (close <= exitlowestLow and IsLong())
    strategy.close_all()

if (close >= exithighestHigh and IsShort())
    strategy.close_all()
